<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>untagged on Pushkar Kukde</title>
    <link>http://example.org/tags/untagged/</link>
    <description>Recent content in untagged on Pushkar Kukde</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 23 Apr 2020 21:01:20 +0530</lastBuildDate>
    
	<atom:link href="http://example.org/tags/untagged/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The very basics of constexpr</title>
      <link>http://example.org/posts/constuse/</link>
      <pubDate>Thu, 23 Apr 2020 21:01:20 +0530</pubDate>
      
      <guid>http://example.org/posts/constuse/</guid>
      <description>Introduction to constexpr C++11 introduced the concept of constexpr, which to put it broadly, does stuff that is &amp;ldquo;constexpr-ed&amp;rdquo; at compile time.
Simply put, a constexpr object declaration indirectly means it is declared as const, whereas a constexpr function declaration means it is implicitly declared inline( functions which replace the function call with the function code, thus saving overhead.).
constexpr saves a ton of runtime and since they act in compile time are implicitly thread safe.</description>
    </item>
    
  </channel>
</rss>